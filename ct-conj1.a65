#ifndef OMIT_IsVowel
IsVowel:
	sep #$21
	.as : sbc #$A0
	cmp #$0
	beq L125
	cmp #$22
	beq L125
	bcs L122
	cmp #$14
	beq L125
	bcs L120
	cmp #$8
	beq L125
	bcs L119
	cmp #$4
	bne L126
	bra L125
L119:
	cmp #$E
	bne L126
	bra L125
L120:
	cmp #$1A
	beq L125
	bcs L121
	cmp #$18
	bne L126
	bra L125
L121:
	cmp #$1E
	bne L126
	bra L125
L122:
	cmp #$40
	bcc L123
	cmp #$44
	bcc L125
	sbc #$50
	cmp #$4
	bcs L126
	bra L125
L123:
	cmp #$2E
	beq L125
	bcs L124
	cmp #$28
	bne L126
	bra L125
L124:
	cmp #$32
	bne L126
L125:
	sec
	rts
L126:
	clc
	rts
#endif
#ifndef OMIT_IsVowelTypeChar
IsVowelTypeChar:
	sep #$20
	pha
	sta $1,s
	jsr IsVowel
	bcc L127
	sep #$10
	ply
	rts
L127:
	lda $1,s
	sec
	.as : sbc #$D4
	cmp #$7
	bcs L128
	sep #$11
	ply
	rts
L128:
	clc
	sep #$10
	ply
	rts
#endif
#ifndef OMIT_IsBackVowelTypeChar
IsBackVowelTypeChar:
	sep #$21
	.as : sbc #$A0
	cmp #$0
	beq L132
	cmp #$2E
	beq L132
	bcs L130
	cmp #$14
	beq L132
	bcs L129
	cmp #$E
	bne L133
	bra L132
L129:
	cmp #$1A
	beq L132
	cmp #$28
	bne L133
	bra L132
L130:
	cmp #$36
	bcc L131
	cmp #$38
	bcc L132
	cmp #$3A
	beq L132
	cmp #$3C
	bne L133
	bra L132
L131:
	cmp #$34
	bne L133
L132:
	sec
	rts
L133:
	clc
	rts
#endif
#ifndef OMIT_IsFrontVowelTypeChar
IsFrontVowelTypeChar:
	sep #$21
	.as : sbc #$B8
	cmp #$0
	beq L137
	cmp #$23
	beq L137
	bcs L135
	cmp #$1D
	beq L137
	bcs L134
	cmp #$1A
	bne L138
	bra L137
L134:
	sbc #$20
	cmp #$2
	bcs L138
	bra L137
L135:
	cmp #$29
	bcc L136
	cmp #$2B
	bcc L137
	sbc #$39
	cmp #$2
	bcs L138
	bra L137
L136:
	cmp #$25
	bne L138
L137:
	sec
	rts
L138:
	clc
	rts
#endif
#ifndef OMIT_IsOtherVowelTypeChar
IsOtherVowelTypeChar:
	sep #$21
	.as : sbc #$A4
	cmp #$0
	beq L140
	cmp #$1E
	beq L140
	bcs L139
	cmp #$4
	beq L140
	cmp #$1A
	bne L141
	bra L140
L139:
	cmp #$3F
	beq L140
	cmp #$4F
	bne L141
L140:
	sec
	rts
L141:
	clc
	rts
#endif
#ifndef OMIT_IsNumber
IsNumber:
	sep #$21
	.as : sbc #$D4
	cmp #$A
	bcs L142
	sec
	rts
L142:
	clc
	rts
#endif
#ifndef OMIT_IsKPT
IsKPT:
	sep #$21
	.as : sbc #$AA
	cmp #$0
	beq L144
	cmp #$1A
	beq L144
	bcs L143
	cmp #$5
	beq L144
	cmp #$9
	bne L145
	bra L144
L143:
	cmp #$1F
	beq L144
	cmp #$23
	bne L145
L144:
	sec
	rts
L145:
	clc
	rts
#endif
#ifndef OMIT_IsFront
IsFront:
	sep #$20
	pha
	pha
	pha
	pha
	.as : lda #$0
	sta $1,s
	sta $2,s
	sta $3,s
	rep #$10
	.xl : ldx #0
L146:
	jsr LoopHelper
	beq L155
	sta $4,s
	lda #$1
	sta $3,s
	lda $4,s
	phx
	jsr IsBackVowelTypeChar
	rep #$10
	plx
	bcc L147
	lda #$1
	sta $1,s
L147:
	lda $4,s
	phx
	jsr IsFrontVowelTypeChar
	rep #$10
	plx
	bcc L148
	lda #$2
	sta $1,s
L148:
	lda $4,s
	phx
	jsr IsOtherVowelTypeChar
	rep #$10
	plx
	bcc L149
	lda #$1
	sta $2,s
L149:
	lda $4,s
	sec
	sbc #$A7
	cmp #$0
	beq L153
	cmp #$1D
	beq L153
	bcs L151
	cmp #$9
	beq L153
	bcs L150
	cmp #$3
	bne L154
	bra L153
L150:
	cmp #$1A
	bne L154
	bra L153
L151:
	cmp #$39
	beq L153
	bcs L152
	cmp #$23
	bne L154
	bra L153
L152:
	cmp #$49
	bne L154
L153:
	lda #$0
	sta $3,s
L154:
	inx
	bra L146
L155:
	lda $1,s
	cmp #$2
	bne L156
	sec
	ply
	ply
	rts
L156:
	lda $1,s
	cmp #$1
	bne L157
	clc
	ply
	ply
	rts
L157:
	lda $2,s
	cmp #$1
	bne L158
	sec
	ply
	ply
	rts
L158:
	lda $3,s
	cmp #$1
	bne L159
	sec
	ply
	ply
	rts
L159:
	clc
	ply
	ply
	rts
#endif
#ifndef OMIT_Length
Length:
	sep #$20
	pha
	.as : lda #$0
	sta $1,s
	rep #$10
	.xl : ldx #0
L160:
	jsr LoopHelper
	beq L161
	lda $1,s
	inc
	sta $1,s
	inx
	bra L160
L161:
	lda $1,s
	sep #$10
	ply
	rts
#endif
#ifndef OMIT_LastCharN
LastCharN:
	rep #$20
	.al : and #$FF
	rep #$10
	ora #$8000
	tax
	jsr LoopHelper
	rts
#endif
#ifndef OMIT_IsAbbrev
IsAbbrev:
	sep #$20
	pha
	pha
	pha
	pha
	pha
	.as : lda #$0
	sta $1,s
	sta $2,s
	sta $3,s
	rep #$10
	.xl : ldx #0
L162:
	jsr LoopHelper
	beq L166
	sta $5,s
	lda $1,s
	inc
	sta $1,s
	lda #$1
	sta $4,s
	lda $5,s
	phx
	jsr IsVowel
	rep #$10
	plx
	bcc L163
	lda #$1
	sta $2,s
	sta $3,s
	lda #$0
	sta $4,s
L163:
	lda $5,s
	phx
	jsr IsNumber
	rep #$10
	plx
	bcc L164
	sep #$20
	lda $3,s
	cmp #$1
	bne L164
	lda #$0
	sta $2,s
L164:
	sep #$20
	lda $4,s
	cmp #$1
	bne L165
	lda #$0
	sta $3,s
L165:
	inx
	bra L162
L166:
	lda $1,s
	cmp #$1
	bne L167
	sep #$11
	ply
	ply
	ply
	ply
	ply
	rts
L167:
	lda $2,s
	bne L168
	sep #$11
	ply
	ply
	ply
	ply
	ply
	rts
L168:
	clc
	sep #$10
	ply
	ply
	ply
	ply
	ply
	rts
#endif
#ifndef OMIT_IsEs
IsEs:
	sep #$20
	.as : lda #$1
	jsr LastCharN
	jsr IsVowelTypeChar
	bcc L170
	sep #$20
	lda #$0
	jsr LastCharN
	sec
	sbc #$B2
	cmp #$0
	beq L169
	cmp #$1A
	bne L170
L169:
	sec
	rts
L170:
	clc
	rts
#endif
#ifndef OMIT_IsDe
IsDe:
	sep #$20
	.as : lda #$1
	jsr LastCharN
	sec
	sbc #$A3
	cmp #$0
	beq L171
	cmp #$1A
	bne L173
L171:
	lda #$0
	jsr LastCharN
	sec
	sbc #$A4
	cmp #$0
	beq L172
	cmp #$1A
	bne L173
L172:
	sec
	rts
L173:
	clc
	rts
#endif
#ifndef OMIT_IsAlien
IsAlien:
	sep #$20
	.as : lda #$0
	jsr LastCharN
	sec
	sbc #$B6
	cmp #$0
	beq L174
	cmp #$1A
	bne L176
L174:
	lda #$1
	jsr LastCharN
	sec
	sbc #$AE
	cmp #$0
	beq L175
	cmp #$1A
	bne L176
L175:
	sec
	rts
L176:
	clc
	rts
#endif
#ifndef OMIT_EndWithVowel
EndWithVowel:
	sep #$20
	.as : lda #$0
	jsr LastCharN
	jsr IsVowelTypeChar
	bcc L177
	rts
L177:
	rts
#endif
#ifndef OMIT_DoubleHard
DoubleHard:
	sep #$20
	pha
	jsr EndWithVowel
	bcc L178
	sep #$20
	.as : lda #$2
	jsr LastCharN
	sta $1,s
	lda #$1
	jsr LastCharN
	cmp $1,s
	bne L178
	jsr IsKPT
	bcc L178
	sep #$10
	ply
	rts
L178:
	clc
	sep #$10
	ply
	rts
#endif
#ifndef OMIT_AkiEnd
AkiEnd:
	sep #$20
	.as : lda #$2
	jsr LastCharN
	sec
	sbc #$A0
	cmp #$0
	beq L180
	cmp #$41
	beq L180
	bcs L179
	cmp #$1A
	bne L183
	bra L180
L179:
	cmp #$51
	bne L183
L180:
	lda #$1
	jsr LastCharN
	sec
	sbc #$AA
	cmp #$0
	beq L181
	cmp #$1A
	bne L183
L181:
	lda #$0
	jsr LastCharN
	sec
	sbc #$A8
	cmp #$0
	beq L182
	cmp #$1A
	bne L183
L182:
	sec
	rts
L183:
	clc
	rts
#endif
#ifndef OMIT_OutWord
OutWord:
	sep #$20
	pha
	pha
	sta $1,s
	rep #$10
	.xl : ldx #0
L184:
	jsr LoopHelper
	beq L186
	sta $2,s
	lda $1,s
	bne L185
	ply
	rts
L185:
	lda $1,s
	dec
	sta $1,s
	.as : lda #0
	xba
	lda $2,s
	phx
	jsr OutcHelper
	plx
	inx
	bra L184
L186:
	ply
	rts
#endif
#ifndef OMIT_OutWordBut
OutWordBut:
	sep #$20
	pha
	pha
	pha
	sta $2,s
	jsr Length
	sta $1,s
	rep #$10
	.xl : ldx #0
L187:
	jsr LoopHelper
	beq L189
	sta $3,s
	lda $1,s
	cmp $2,s
	bne L188
	ply
	sep #$10
	ply
	rts
L188:
	lda $1,s
	dec
	sta $1,s
	.as : lda #0
	xba
	lda $3,s
	rep #$10
	phx
	jsr OutcHelper
	plx
	inx
	bra L187
L189:
	ply
	sep #$10
	ply
	rts
#endif
#ifndef OMIT_HardStem
HardStem:
	sep #$20
	pha
	jsr IsAlien
	bcc L190
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$F6
	jsr OutcHelper
	lda #$CD
	sep #$10
	ply
	brl OutcHelper
L190:
	jsr IsAbbrev
	bcc L201
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$EA
	jsr OutcHelper
	lda #$0
	jsr LastCharN
	sta $1,s
	sec
	.as : sbc #$A5
	cmp #$0
	beq L195
	cmp #$20
	bcc L193
	cmp #$23
	bcc L195
	cmp #$2B
	bcc L192
	cmp #$2D
	bcc L195
	cmp #$36
	beq L195
	bcs L191
	cmp #$33
	bne L196
	bra L195
L191:
	cmp #$38
	bne L196
	bra L195
L192:
	sec
	sbc #$26
	cmp #$2
	bcs L196
	bra L195
L193:
	cmp #$C
	bcc L194
	cmp #$E
	bcc L195
	sbc #$11
	cmp #$2
	bcc L195
	cmp #$9
	bne L196
	bra L195
L194:
	sec
	sbc #$6
	cmp #$3
	bcs L196
L195:
	rep #$20
	.al : lda #$F1
	sep #$10
	ply
	brl OutcHelper
L196:
	sep #$20
	lda $1,s
	sec
	.as : sbc #$B9
	cmp #$0
	beq L197
	cmp #$1A
	bne L198
L197:
	rep #$20
	.al : lda #$BA
	sep #$10
	ply
	brl OutcHelper
L198:
	sep #$20
	lda $1,s
	sec
	.as : sbc #$D4
	cmp #$4
	bcc L199
	sbc #$5
	cmp #$2
	bcc L199
	cmp #$3
	bne L200
L199:
	sep #$10
	ply
	rts
L200:
	rep #$20
	.al : lda #$CD
	sep #$10
	ply
	brl OutcHelper
L201:
	jsr IsEs
	bcc L202
	sep #$20
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$CD
	ply
	brl OutcHelper
L202:
	jsr IsDe
	bcc L203
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$CD
	jsr OutcHelper
	lda #$CD
	sep #$10
	ply
	brl OutcHelper
L203:
	jsr EndWithVowel
	bcc L205
	jsr AkiEnd
	bcc L204
	.as : lda #$1
	jsr OutWordBut
	rep #$20
	.al : lda #$BE
	ply
	brl OutcHelper
L204:
	sep #$20
	.as : lda #$0
	sep #$10
	ply
	bra OutWordBut
L205:
	sep #$20
	lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$C2
	ply
	brl OutcHelper
#endif
#ifndef OMIT_SoftStem
SoftStem:
	jsr IsAlien
	bcc L206
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$F6
	brl OutcHelper
L206:
	jsr IsAbbrev
	bcc L207
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$EA
	brl OutcHelper
L207:
	jsr IsEs
	bcc L208
	sep #$20
	.as : lda #$1
	jsr OutWordBut
	rep #$20
	.al : lda #$C4
	jsr OutcHelper
	lda #$CC
	jsr OutcHelper
	lda #$BE
	brl OutcHelper
L208:
	jsr IsDe
	bcc L209
	.as : lda #$2
	jsr OutWordBut
	rep #$20
	.al : lda #$CD
	jsr OutcHelper
	lda #$BE
	jsr OutcHelper
	lda #$BE
	brl OutcHelper
L209:
	jsr EndWithVowel
	bcc L212
	jsr DoubleHard
	bcc L210
	sep #$20
	.as : lda #$2
	jsr OutWordBut
	lda #$0
	jsr LastCharN
	rep #$20
	.al : and #$FF
	brl OutcHelper
L210:
	jsr AkiEnd
	bcc L211
	.as : lda #$2
	jsr OutWordBut
	rep #$20
	.al : lda #$BE
	brl OutcHelper
L211:
	sep #$20
	.as : lda #$0
	bra OutWordBut
L212:
	sep #$20
	lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$C2
	brl OutcHelper
#endif
#ifndef OMIT_EssiveStem
EssiveStem:
	jsr IsAlien
	bcc L213
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$F6
	brl OutcHelper
L213:
	jsr IsAbbrev
	bcc L214
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$EA
	brl OutcHelper
L214:
	jsr IsEs
	bcc L215
	sep #$20
	.as : lda #$1
	jsr OutWordBut
	rep #$20
	.al : lda #$C4
	jsr OutcHelper
	lda #$CC
	jsr OutcHelper
	lda #$BE
	brl OutcHelper
L215:
	jsr IsDe
	bcc L216
	.as : lda #$2
	jsr OutWordBut
	rep #$20
	.al : lda #$CD
	jsr OutcHelper
	lda #$BE
	jsr OutcHelper
	lda #$BE
	brl OutcHelper
L216:
	jsr EndWithVowel
	bcc L218
	jsr AkiEnd
	bcc L217
	.as : lda #$1
	jsr OutWordBut
	rep #$20
	.al : lda #$BE
	brl OutcHelper
L217:
	sep #$20
	.as : lda #$0
	bra OutWordBut
L218:
	sep #$20
	lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$C2
	brl OutcHelper
#endif
#ifndef OMIT_IllativeStem
IllativeStem:
	sep #$20
	pha
	jsr IsAlien
	bcc L219
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$F6
	jsr OutcHelper
	lda #$C1
	jsr OutcHelper
	lda #$CE
	sep #$10
	ply
	brl OutcHelper
L219:
	jsr IsAbbrev
	bcc L220
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$EA
	jsr OutcHelper
	jsr Out_A
	sep #$10
	ply
	bra Out_A
L220:
	jsr IsEs
	bcc L221
	sep #$20
	.as : lda #$1
	jsr OutWordBut
	rep #$20
	.al : lda #$C4
	jsr OutcHelper
	lda #$CC
	jsr OutcHelper
	lda #$BE
	jsr OutcHelper
	lda #$BE
	sep #$10
	ply
	brl OutcHelper
L221:
	jsr IsDe
	bcc L222
	.as : lda #$2
	jsr OutWordBut
	rep #$20
	.al : lda #$CD
	jsr OutcHelper
	lda #$BE
	jsr OutcHelper
	lda #$BE
	jsr OutcHelper
	lda #$CC
	jsr OutcHelper
	lda #$BE
	jsr OutcHelper
	lda #$BE
	sep #$10
	ply
	brl OutcHelper
L222:
	jsr EndWithVowel
	bcc L225
	jsr DoubleHard
	bcc L223
	sep #$20
	.as : lda #$2
	jsr OutWordBut
	lda #$0
	jsr LastCharN
	sta $1,s
	rep #$20
	.al : and #$FF
	jsr OutcHelper
	lda $1,s
	and #$FF
	sep #$10
	ply
	brl OutcHelper
L223:
	jsr AkiEnd
	bcc L224
	.as : lda #$2
	jsr OutWordBut
	rep #$20
	.al : lda #$BE
	jsr OutcHelper
	lda #$BE
	sep #$10
	ply
	brl OutcHelper
L224:
	sep #$20
	.as : lda #$0
	jsr OutWordBut
	lda #$0
	jsr LastCharN
	sta $1,s
	rep #$20
	.al : and #$FF
	sep #$10
	ply
	brl OutcHelper
L225:
	sep #$20
	.as : lda #$0
	jsr OutWordBut
	rep #$20
	.al : lda #$C2
	jsr OutcHelper
	lda #$C2
	sep #$10
	ply
	brl OutcHelper
#endif
#if !defined(OMIT_Do_A) || !defined(OMIT_Do_LLA) || !defined(OMIT_Do_LTA) || !defined(OMIT_Do_NA) || !defined(OMIT_Do_SSA) || !defined(OMIT_Do_STA) || !defined(OMIT_Do_TTA) || !defined(OMIT_Out_A)
Out_A:
	jsr IsFront
	bcc L226
	rep #$20
	.al : lda #$F1
	brl OutcHelper
#endif
#ifndef OMIT_Out_A
L226:
	rep #$20
	.al : lda #$BA
	brl OutcHelper
#endif
#ifndef OMIT_Do_N
Do_N:
	jsr SoftStem
	rep #$20
	.al : lda #$C7
	brl OutcHelper
#endif
#ifndef OMIT_Do_A
Do_A:
	jsr HardStem
	bra Out_A
#endif
#ifndef OMIT_Do_SSA
Do_SSA:
	jsr SoftStem
	rep #$20
	.al : lda #$CC
	jsr OutcHelper
	lda #$CC
	jsr OutcHelper
	bra Out_A
#endif
#ifndef OMIT_Do_LLA
Do_LLA:
	jsr SoftStem
	rep #$20
	.al : lda #$C5
	jsr OutcHelper
	lda #$C5
	jsr OutcHelper
	bra Out_A
#endif
#ifndef OMIT_Do_LTA
Do_LTA:
	jsr SoftStem
	rep #$20
	.al : lda #$C5
	jsr OutcHelper
	lda #$CD
	jsr OutcHelper
	bra Out_A
#endif
#ifndef OMIT_Do_LLE
Do_LLE:
	jsr SoftStem
	rep #$20
	.al : lda #$C5
	jsr OutcHelper
	lda #$C5
	jsr OutcHelper
	lda #$BE
	brl OutcHelper
#endif
#ifndef OMIT_Do_STA
Do_STA:
	jsr SoftStem
	rep #$20
	.al : lda #$CC
	jsr OutcHelper
	lda #$CD
	jsr OutcHelper
	bra Out_A
#endif
#ifndef OMIT_Do_TTA
Do_TTA:
	jsr SoftStem
	rep #$20
	.al : lda #$CD
	jsr OutcHelper
	lda #$CD
	jsr OutcHelper
	bra Out_A
#endif
#ifndef OMIT_Do_KSI
Do_KSI:
	jsr SoftStem
	rep #$20
	.al : lda #$C4
	jsr OutcHelper
	lda #$CC
	jsr OutcHelper
	lda #$C2
	brl OutcHelper
#endif
#ifndef OMIT_Do_NA
Do_NA:
	jsr EssiveStem
	rep #$20
	.al : lda #$C7
	jsr OutcHelper
	bra Out_A
#endif
#ifndef OMIT_Do_HUN
Do_HUN:
	jsr IllativeStem
	rep #$20
	.al : lda #$C7
	brl OutcHelper
#endif
