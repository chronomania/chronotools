#
# This file is derived from taipus.cc, and attempts to describe
# the algorithm so that it's translatable in asm.
# 
# It is responsible of conjugating names in the game.
#
#  Syntax
#
## FUNCTION name
#     declare function.
#     If parameter given, it's assigned to variable "c".
#     Returns byte/bool/void depending if you use TRUE/FALSE/RET/RETURN.
## OUT value
#     Outputs character in value
## VAR name..
#     define local variables
## REG name..
#     define register variables
## LET name1 value
#     assign name1 from value
## INC name
#     name++
## DEC name
#     name--
## { 
#     loop over character name, store current character in variable "c"
## }
#     end character name loop
## ? name characters
#     If name is in set, process subblock
## > name value
#     if(name > value), process subblock
## = name value
#     if(name == value), process subblock
## TRUE
#     Return TRUE
## FALSE
#     Return FALSE
## RETURN [name]
#     If name given, return variable
#     Return from function.
## IF name1 [value]
#     Call bool-func name1
#     If value given, will be passed as param.
#     Process subblock if true retval
## CALL_GET name1 name2
#     Call integer-func name1, return value to name2.
## CALL name1 [value]
#     Call bool-func name1
#     If value given, will be passed as param.
#     Ignore return value

FUNCTION IsVowel
REG c
? c aeiouy‰ˆÂÈAEIOUYƒ÷≈…0123456
  TRUE
FALSE

FUNCTION IsKPT
REG c
? c kKpPtT
  TRUE
FALSE

FUNCTION IsFront
VAR VowelType FoundE Finalguess c
LET VowelType 0
LET FoundE 0
LET Finalguess 0
{
  LET Finalguess 1
  ? c aouAOU02368
    LET VowelType 1
  ? c ‰ˆyƒ÷Y14579
    LET VowelType 2
  ? c eiÈEI…
    LET FoundE 1
  ? c hkqÂHKQ≈
    LET Finalguess 0
}
= VowelType 2
  TRUE
= VowelType 1
  FALSE
= FoundE 1
  TRUE
= Finalguess 1
  TRUE
FALSE

FUNCTION Length
VAR Len
REG c
LET Len 0
{
  INC Len
}
RETURN Len

FUNCTION LastChar3
VAR c1 c2 c3 c
LET c1 0
LET c2 0
LET c3 0
{
  LET c3 c2
  LET c2 c1
  LET c1 c
}
RETURN c3

FUNCTION LastChar2
VAR c1 c2 c
LET c1 0
LET c2 0
{
  LET c2 c1
  LET c1 c
}
RETURN c2

FUNCTION LastChar1
VAR c1
REG c
LET c1 0
{
  LET c1 c
}
RETURN c1

FUNCTION IsAbbrev
VAR Len Vowels WasVowel ElseFlag c
LET Len 0
LET Vowels 0
LET WasVowel 0
{
  INC Len
  LET ElseFlag 1
  ? c aeiouy‰ˆÂÈAEIOUYƒ÷≈…
    LET Vowels 1
    LET WasVowel 1
    LET ElseFlag 0
  ? c 0123456789
    = WasVowel 1
      LET Vowels 0
    #s WasVowel 0
    #s ElseFlag 0
  = ElseFlag 1
    LET WasVowel 0
}
= Len 1
  TRUE
= Vowels 0
  TRUE
FALSE

FUNCTION IsEs
REG c2 c
CALL_GET LastChar2 c2
IF IsVowel c2
  CALL_GET LastChar1 c
  ? c sS
    TRUE
FALSE

FUNCTION EndWithVowel
REG c1
CALL_GET LastChar1 c1
IF IsVowel c1
  TRUE
FALSE

FUNCTION DoubleHard
VAR c3
REG c2
IF EndWithVowel
  CALL_GET LastChar3 c3
  CALL_GET LastChar2 c2
  = c3 c2
    IF IsKPT c2
      TRUE
FALSE

FUNCTION AkiEnd
REG c3 c2 c1
CALL_GET LastChar3 c3
? c3 aA‰ƒ
  CALL_GET LastChar2 c2
  IF IsKPT c2
    CALL_GET LastChar1 c1
    ? c1 iI
      TRUE
FALSE

FUNCTION OutWord
VAR left c
LET left c
{
  = left 0
    RETURN
  OUT c
  DEC left
}
RETURN

FUNCTION HardStem
VAR Len CaseFound c
CALL_GET Length Len
IF IsAbbrev
  CALL OutWord Len
  OUT ':'
  LET CaseFound 0
  CALL_GET LastChar1 c
  ? c flmnrswxFLMNRSWX479
    OUT '‰'
    LET CaseFound 1
  ? c zZ
    OUT 'a'
    LET CaseFound 1
  ? c 0123568
    RETURN
  = CaseFound 0
    OUT 't'
  RETURN
IF IsEs
  CALL OutWord Len
  OUT 't'
  RETURN
IF EndWithVowel
  IF AkiEnd
    DEC Len
    CALL OutWord Len
    OUT 'e'
    RETURN
  CALL OutWord Len
  RETURN
CALL OutWord Len
OUT 'i'
RETURN

FUNCTION SoftStem
VAR Len
REG chr
CALL_GET Length Len
IF IsAbbrev
  CALL OutWord Len
  OUT ':'
  RETURN
IF IsEs
  DEC Len
  CALL OutWord Len
  OUT 'k'
  OUT 's'
  OUT 'e'
  RETURN
IF EndWithVowel
  IF DoubleHard
    DEC Len
    DEC Len
    CALL OutWord Len
    CALL_GET LastChar1 chr
    OUT chr
    RETURN
  IF AkiEnd
    DEC Len
    DEC Len
    CALL OutWord Len
    OUT 'e'
    RETURN
  CALL OutWord Len
  RETURN
CALL OutWord Len
OUT 'i'
RETURN

FUNCTION Out_A
IF IsFront
  OUT '‰'
  RETURN
OUT 'a'
RETURN

FUNCTION Do_N
CALL SoftStem
OUT 'n'
RETURN

FUNCTION Do_A
CALL HardStem
CALL Out_A
RETURN

FUNCTION Do_LLA
CALL SoftStem
OUT 'l'
OUT 'l'
CALL Out_A
RETURN

FUNCTION Do_LLE
CALL SoftStem
OUT 'l'
OUT 'l'
OUT 'e'
RETURN

FUNCTION Do_STA
CALL SoftStem
OUT 's'
OUT 't'
CALL Out_A
RETURN

# -- End --
