; Part of Chronotools - http://bisqwit.iki.fi/source/chronotools.html
;
; Copyright (C) 2003,2013 Bisqwit (http://iki.fi/bisqwit/)
; Copyright (C) 2013 Michal Ziabkowski
;
; This code draws text using VWF8 (variable width 8pix tall font).
;
; To be assembled with snescom.
;    http://bisqwit.iki.fi/source/snescom.html
;

;   The functions to be called are:
;        DrawS_2bit - for 2bit screens
;        DrawS_4bit - for 4bit screens
;   See DrawS_boot for register usage.


; Note - This file is not really as big as it seems.
;        It only has lots of comments and some unrolled loops!

; Things that can be rendered in VWF8:
; *i = Item list
; *l1 = Item types? -- used in battle, not currently rendered in vwf
; *t11 = Techniques

; NMI uses vars at:
;       $000Dxx
;       $0000Fx
;       $00040x
; so don't mess them.
; FIXME - IRQ unclear

#define W_RENDERCACHE1 $FE00
#define W_RENDERCACHE2 $FE80

#define W_QUEUEHEAD    $FEF2
#define W_QUEUETAIL    $FEF4

#define W_TILENUM      $FEF6
#define W_VRAMADDR     $FEF8
#define W_CLOCKW1      $FEFA
#define W_CLOCKW2      $FEFC
#define W_CLOCKW3      $FEFE

; DMA queue is maximally 8*32 bytes
#define DMAQUEUE       $FF00

; Contains 32 elements. Mask 31 is used to do modulo-32 math. 
#define DMAQUEUE_MASK 31

#define DMAQUEUE_VALID_KEY $CAFE

#define MAX_NUM_STRINGS_PER_FRAME 1

; DMA queue record format:
;        $00 : Target PPU address
;        $02 : Source ROM address (3 bytes)
;        $05 : Transfer size in words
;        $06 : Key for identifying valid data




; External symbols - defined by the linker:
;   Font address:
;    TILEDATA_ADDR - CONST
;   Width table address:
;    WIDTH_ADDR    - CONST
;
;  Item table address:
;    ITEMTABLE     - CONST
;  Tech table address:
;    TECHTABLE     - CONST
;
;   VWF8_DISPLAY_EQ_COUNT - CONST (0,2)
;
;  Prerendered strings:
;    VWF8_TECHS_2BPP
;    VWF8_TECHS_4BPP
;    VWF8_ITEMS_2BPP_PART1
;    VWF8_ITEMS_4BPP_PART1
;    VWF8_ITEMS_4BPP_PART2


#define RTL_IN_PAGE_C2 $5841 ; address of RTL in page C2

.text
.xl

; Define functions for handling the bitness...
#define SET_8_BIT_A()   sep #$20 : .as
#define SET_16_BIT_A()  rep #$20 : .al
#define SET_8_BIT_X()   sep #$10 : .xs
#define SET_16_BIT_X()  rep #$10 : .xl

#define SET_8_BIT_AX()  sep #$30 : .xs : .as
#define SET_16_BIT_AX() rep #$30 : .xl : .al

#define DELAY_16CYCLES()   nop:nop:nop:nop:nop:nop:nop:nop:nop:nop


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Section: Non-VWF functions. These are just here because our item, tech and
; monster tables were relocated and changed into variable length pointer arrays.


DialogItemCall:
        jsr GetItemName
        iny ;skip the first char
DialogItemCallPart2:
        SET_8_BIT_A()
        sty $0237
        xba
        sta $0239
        ldy #0
        jsr TinyStrlenFunc
        ; return value: length
        tya
        rtl

DialogTechCall:
        jsr GetTechName
        SET_8_BIT_A()
        sty $0237
        xba
        sta $0239
        
        lda [$37]
        cmp #$2F    ; Is the first char a star?
        bne +
        ldy $0237   ; It is a star - skip it.
        iny
        sty $0237
      + ldy #0
        jsr TinyStrlenFunc
        ; return value: length
        tya
        rtl

DialogMonsterCall:
        jsr GetMonsterName
        inc $3D ; Got the name, skip to next parameter.
        bra DialogItemCallPart2


BattleMonsterFunc:
.(
        .al
        .xl
        ; Code here
        ;In:
        ;    A = tech number
        ;  $80 = line number * 2
        ;Todo:
        ;    write tile numbers to $7E94A0
        ;Assume:
        ;    DB=7E
        ;Can use:
        ;    X, Y, A
        jsr GetMonsterName
        
        ; Allocate temporary space
        pei ($10)
        pei ($12)
        
        ; Y = tech offset
        ; Ah = tech segment
        ; Al = tech name length
        
        SET_8_BIT_A()

        sty $10
        xba
        sta $12
        
        tdc : tay
      - cpy #$000C
        beq +
        lda [$10],y
        beq +
        sta $94A0,y
        lda #$FF
        sta $94B0,y
        iny
        bra -
      + lda #$FF
      - cpy #$000C
        beq +
        sta $94A0,y
        sta $94B0,y
        iny
        bra -
        
      + SET_16_BIT_A()
        
        pla : sta $12
        pla : sta $10

        SET_8_BIT_A()
        
        ; Must leave with A=8bit, X=16bit, Ah=0
        tdc
        rtl
.)

      - iny ; this is part of the strlen func
TinyStrlenFunc:
        ; Sort of strlen function
        lda [$37],y
        bne -
        rts


GetItemName:
        ; In - Al=item number
        ; Out- Al=maxlen
        ;      Ah,Y=address of string
        ;
        
        SET_16_BIT_AX()
        and #$00FF
        asl
        
        phx 
         tax
         lda @ITEMTABLE,x
         tay
        plx
        .byt $A9, $F0+11, ^ITEMTABLE   ;Al=length, Ah=itemtable seg
        rts

GetTechName:
        ; In - Al=tech number
        ; Out- Al=maxlen
        ;      Ah,Y=address of string
        ;
        
        SET_16_BIT_AX()
        and #$00FF
        asl
        
        phx 
         tax
         lda @TECHTABLE,x
         tay
        plx
        .byt $A9, $F0+11, ^TECHTABLE   ;Al=length, Ah=itemtable seg
        rts

GetMonsterName:
        ; In - Al=monster number
        ; Out- Al=maxlen
        ;      Ah,Y=address of string
        ;
        
        SET_16_BIT_AX()
        and #$00FF
        asl
        
        phx 
         tax
         lda @MONSTERTABLE,x
         tay
        plx
        .byt $A9, $F0+11, ^MONSTERTABLE   ;Al=length, Ah=itemtable seg
        rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Helper functions. Not right-away related to VWF, but I don't remember what they are for. -Bisqwit

EquipLeftHelper:
        lda $0F62,y : sta $04CA  ; copy item count (copied from jap. version)
        lda $0F00,y : sta $04C9  ; copy item number (in both versions)

        SET_16_BIT_AX()
        phx
         phy
          phk : per (+) -1
          pea RTL_IN_PAGE_C2 - 1
          jmp @$C2A59A ; go get item number.
       + ply
         lda $04C9
         and #$00FF
         beq +
         iny
      + pla
        rtl

EquipLeftHelper2:
        ldy #$9B76 ;hardcoded - copy from rom
        lda #$7E0B ;clear 11(0B) bytes instead of 10(0A)
        rtl

BattleTechHelper:
        .as
        lda #$03
        sta $87
        rtl

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GetItem_TilePtr_4bpp:
        ; In - Al=item number
        ; Out- Al=?
        ;      Ah,Y=address of 4bpp tile data
        ;             = VWF8_ITEMS_4BPP_PART1 + itemno * 512
        SET_8_BIT_A()
        asl      ; A = itemno*2
        xba      ; A = itemno*512 + garbage
        lda #0   ; A = itemno*512
        bcs +
        ; Positive: item was 0-127

        SET_16_BIT_AX()
        adc #!VWF8_ITEMS_4BPP_PART1
        tay
        .byt $A9, 11, ^VWF8_ITEMS_4BPP_PART1  ; AH = segment, AL = 0
	rts

+	; Negative: item was 128-255
        SET_16_BIT_AX()
        clc
        adc #!VWF8_ITEMS_4BPP_PART2
        tay
        .byt $A9, 11, ^VWF8_ITEMS_4BPP_PART2  ; AH = segment, AL = 0
	rts


GetTech_TilePtr_4bpp:
        ; In - Al=tech number
        ; Out- Al=?
        ;      Ah,Y=address of 4bpp tile data
        ;             = VWF8_TECHS_4BPP + techno * 512
        SET_16_BIT_AX()
        and #$00FF
        xba    ; A = techno*256
        asl    ; A = techno*512
        adc #!VWF8_TECHS_4BPP
        tay
        .byt $A9, 11, ^VWF8_TECHS_4BPP  ; AH = segment, AL = 0
	rts

GetItem_TilePtr_2bpp:
        ; In - Al=item number
        ; Out- Al=?
        ;      Ah,Y=address of 2bpp tile data
        ;             = VWF8_ITEMS_2BPP_PART1 + itemno * 256
        SET_16_BIT_AX()
        and #$00FF
        xba    ; A = itemno*256
        clc
        adc #!VWF8_ITEMS_2BPP_PART1
        tay
        .byt $A9, 11, ^VWF8_ITEMS_2BPP_PART1  ; AH = segment, AL = 0
	rts

GetTech_TilePtr_2bpp:
        ; In - Al=tech number
        ; Out- Al=?
        ;      Ah,Y=address of 2bpp tile data
        ;             = VWF8_TECHS_2BPP + techno * 256
        SET_16_BIT_AX()
        and #$00FF
        xba    ; A = techno*256
        clc
        adc #!VWF8_TECHS_2BPP
        tay
        .byt $A9, 11, ^VWF8_TECHS_2BPP  ; AH = segment, AL = 0
	rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;








; Functions for calculating W_VRAMADDR (which is a WORD address, not a BYTE address).

Make_VRAM_address_4bpp:
	; Procedure:  W_VRAMADDR = A + W_TILENUM * 16
	.al
	sta W_VRAMADDR
	lda W_TILENUM
	;and #$03FF
	asl
	bra Make_VRAM_address_common

Make_VRAM_address_2bpp:
	; Procedure:  W_VRAMADDR = A + W_TILENUM * 8
	.al
	sta W_VRAMADDR
	lda W_TILENUM
	;and #$03FF
Make_VRAM_address_common:
	asl
	asl
	asl
	clc
	adc W_VRAMADDR
	sta W_VRAMADDR
	rts


Write_TileIndexes:
	; Put Al number of tileindexes into DB:X
	;
	SET_16_BIT_AX()
	pha
	phy
	 and #$00FF
	 tay         ; Put the count into Y

	 lda $7E     ; attr from the game
	 xba
	 and #$FF00

	 ora W_TILENUM
	 
	- sta !$0000,x
	  inx
	  inx
	  inc
	  dey
	  bne -
	
	ply
	pla
	rts

BattleWrite_TileIndexes:
	; Put 16 tileindexes into $94A0 and $94B0
	;
	.xl
	pha
	 SET_8_BIT_A()
	 lda W_TILENUM
	 ldx #0
	 - sta $94A0,x ; First row: Tiles
	   inc
	   inx
	   cpx #11
	   bcc -
	 lda #$FF
	 - sta $94A0,x ; First row continues
	   inx
	   cpx #16
	   bcc -
	 - dex
	   sta $94B0,x ; Second row: Blank
	   bne -
	 SET_16_BIT_AX()
	pla
	rts

; Input for DrawS_*bit functions:
;    Ah:Y = Address of the tile-data for string
;    Al   = Number of 8x8 tiles to generate

DrawS_2bit:
        SET_16_BIT_AX()
        phx
         SET_8_BIT_A()
         lda #$10*11/2

-        SET_16_BIT_A()
         pha
          lda W_QUEUEHEAD
          inc W_QUEUEHEAD
          and #DMAQUEUE_MASK
          asl
          asl
          asl
          tax
         pla

         xba ; Ah = size, Al = page
         sta DMAQUEUE+$04,x ; Puts Al in $04, Ah in $05

         tya
         sta DMAQUEUE+$02,x
         lda W_VRAMADDR
         sta DMAQUEUE+$00,x
         lda #DMAQUEUE_VALID_KEY
         sta DMAQUEUE+$06,x
        plx
        rts

DrawS_4bit:
        SET_16_BIT_AX()
        phx
         SET_8_BIT_A()
         lda #$20*11/2
         bra -


; DMA registers for DMA-0:
;         4300: direction, indirect, reverse, fixed, mode
;         4301: dest_addr
;         4302: source_addr 0-23
;         4305: transfer_size 0-15
;         4307: indirect_bank
;         4308: hdma_addr 0-15
;         430A: line_counter

DMA_TransferQueue:
	.al
	.xl

#if MAX_NUM_STRINGS_PER_FRAME > 1
	ldy #MAX_NUM_STRINGS_PER_FRAME
#endif
	pea $7E7E
	plb
	plb
	
	lda #$4370 ; Set DMA7 as target for zp writes. Now e.g. "sta 2" writes to $4372.
	tcd

--	 lda W_QUEUETAIL
	 and #DMAQUEUE_MASK
         asl
         asl
         asl
         tax

         lda DMAQUEUE+$06,x
         cmp #DMAQUEUE_VALID_KEY
         bne +

         ; Disable the entry; it is now being handled
         rol DMAQUEUE+$06,x

         ; Load ROM address (lower 16 bits)
         lda DMAQUEUE+$02,x ; offset
         sta 2

         ; Load size in words
         lda DMAQUEUE+$05,x
         and #$FF
         asl
         sta 5 ; Put size in bytes

         ; Set up DMA mode
         lda #$1801 ; mode = writing words to devize $2118
         sta 0
         
         ; Load PPU address
         lda DMAQUEUE+$00,x
         sta @$2116 

         SET_8_BIT_A()
         ; Load ROM address (upper 8 bits)
         lda DMAQUEUE+$04,x ; page
         sta 4

         ; Commit the DMA.
         lda #$80
         sta @$420B

	 SET_16_BIT_AX()

-        inc W_QUEUETAIL

#if MAX_NUM_STRINGS_PER_FRAME > 1
         dey
         bne --
#endif
	rts

+	; The selected slot did not have proper key.
	; Are we at the top of the queue?
	lda W_QUEUETAIL
	eor W_QUEUEHEAD
	and #DMAQUEUE_MASK
	bne -
	rts

	


DMAHandler_Menu:
	; Already saved so far: B,X,Y,P.  M=X=16bit

	; Transfers the ring buffer.
	; The code uses A,D which have not been saved yet.
	phd
	pha
	 jsr DMA_TransferQueue
	pla
	pld

	; copied from original NMI code
	pea $0000 : plb : plb
	rtl

DMAHandler_Battle:
	; Already saved so far: A,X,Y,B,D.  M=X=16bit
	jsr DMA_TransferQueue

	; copied from original NMI code
	lda #$0000 : tcd
	rtl


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


EquipLeftItemFunc:
.(
        ; In - A=item number
        ;      Y=item position in list
        
        SET_16_BIT_AX()
        
        sty W_TILENUM ;save Y somewhere safe
        
; Display item count
	; If VWF8_DISPLAY_EQ_COUNT = 0, jump to SkipItemCount
	;                          = 2, then jump past this "bra" and DO display item count.
	;
        .byt $80, <VWF8_DISPLAY_EQ_COUNT ;bra next+n
        bra SkipItemCount

        pha ;Save A,X too
         phx
          phk : per (+) -1
          pea RTL_IN_PAGE_C2 - 1
          ; Copied from jap. version: Print item count
          ldy #$04CA   ; source address
          lda #$7E11   ; 7E=seg, &3=?, &70 = attr
          jmp @$C2F114 ; Create number
       + plx

         SET_8_BIT_A()
         lda !$0000,x ;If the number starts with space,
         cmp #$FF
         bne +
         lda !$0002,x ;move the second number to first
         sta !$0000,x 
         lda #$FF    ;and replace second number with space.
         sta !$0002,x
       + inx:inx ;Skip num1
         inx:inx ;Skip num2
         SET_16_BIT_A()
        pla
   SkipItemCount:
;---------

        jsr GetItem_TilePtr_2bpp

        SET_16_BIT_A()
        pha
         tya
         clc
         adc #16
         tay
        pla
        dec ;skip first char (16 bytes) and decrease max length

; Fix for item count
         .byt $80, <VWF8_DISPLAY_EQ_COUNT ;bra next+n
         bra SkipItemCount2

        dec:dec ;decrease max length by 2 more because of the numbers
   SkipItemCount2:
;---------

        pha
         jsr CalculateClockDifference
         cmp #3
         bcc + ; Too small difference to ignore
         cmp #15
         bcc IgnoreItemListVWF8Left ; Okay to ignore

         ; Not ignored
         jsr SaveClock

         + - lda W_TILENUM
         jsr DoTilenumber_8line
         
         lda #$7000
         jsr Make_VRAM_address_2bpp
        pla

        jsr Write_TileIndexes
        jsr DrawS_2bit

    ItemListVWF8Left_Done:
        SET_16_BIT_A()
        
        ; $C2EF65 does this. Resets the attributes (leaves only bits $24).
        lda #$00DC
        trb $7E
        
        rtl

    IgnoreItemListVWF8Left:
        ; Don't ignore if the cursor is on the left side or else scrolling breaks
        lda $54 : and #$00FF
        cmp #4
        bcs -

        pla
        bra ItemListVWF8Left_Done
.)



EquipRightItemFunc:        ;also used in shop
.(
        ; FIXME: ADD SOME KIND OF PREVENTION AGAINST THE GAME'S BUSYREFRESHLOOP
        ;        (NECESSARY IN SHOP, EQUIP FRONT)
        
        ; In - A = item number, X = buffer target
        pha
         ; Find out if we were called from the routine
         ; that displays equipment (4 lines)...
         lda 6,s
         cmp #$A70F: beq were ; eq-viewer?
         ; We weren't - must be from shop-equipper.
         bra +
       were:
         ; We were called from equipviewer.
         sty $22   ;Do a hack, save Y.
       + lda $22   ;counter in create-list
         clc:adc $1041 ;buy-listbegin
         clc:adc $1043 ;sell-listbegin
         ; This works
         sta W_TILENUM
         
         ; The buybuy-lister in shop must not ignore lines.
         lda 6,s
         cmp #$DD65: beq ignoreclockcheck

         jsr CalculateClockDifference
         cmp #3
         bcc + ; Too small difference to ignore
         cmp #15
         bcc IgnoreItemListVWF8Right ; Okay to ignore
         ; Not ignored
         jsr SaveClock
      ignoreclockcheck:
      + pla
        SET_16_BIT_AX()
        
        jsr GetItem_TilePtr_4bpp

        SET_16_BIT_A()
        pha
         lda W_TILENUM
         jsr DoTilenumber_8line
         
         lda #$0000
         jsr Make_VRAM_address_4bpp
        pla

        jsr Write_TileIndexes
        jsr DrawS_4bit

        SET_16_BIT_A()
        
        ; $C2EF65 does this. Resets the attributes (leaves only bits $24).
        lda #$00DC
        trb $7E
        rtl

    IgnoreItemListVWF8Right:
        .al
        .xl
        pla
        ; Skip past 10 characters (20 bytes)
        stx W_TILENUM : lda #10*2: clc: adc W_TILENUM : tax
        lda #$00DC
        trb $7E
        rtl
.)

        


ItemListFunc:
.(
        ; In - A=item number
        
        ; $000054 (byte) = list scrolling position
        ; 
        
        ;jsr CacheTest2
        ;bcs TechDisplaySkip

        jsr GetItem_TilePtr_4bpp

        SET_16_BIT_A()
        
        pha
         ; THIS WORKS! PLEASE DON'T BREAK THIS.
         lda $0416  ; scrolling position
         clc:adc $54   ; index in the item list
         and #$00FF
         
         ; Now we have item list scrolling position.
         ; Divide by 10.

         sta @$004204   ;dividend
         lda #10
         sta @$004206   ;divisor

         ; wait 16 cycles before reading 4216
         DELAY_16CYCLES()

         phx
          lda @$004216   ;remainder
          asl
          tax
          lda @TileNumberList,x
         plx
         sta W_TILENUM
         lda #$0000
         jsr Make_VRAM_address_4bpp
        pla
        
        jsr Write_TileIndexes
        jsr DrawS_4bit

TechDisplaySkip:
        SET_16_BIT_A()

        ; $C2EF65 does this. Resets the attributes (leaves only bits $24).
        lda #$00DC
        trb $7E
        
        rtl
.)



TechListFunc:
.(
        ; In:
        ;    Al     = tech number
        ;    Y      = position in tech list
        ;    $61    = screen address
        ;    $7700  = table of tech colour attributes
        .xl
        sty W_VRAMADDR ; Save Y into a temporary location.
        
        SET_8_BIT_AX()
        pha
         ; C2BDB2 does this.
         ; Get tech colour code
         ;
         tay
         ldx #4*3      ;palette 3
         lda $7700,y   ;load tech attribute
         bit #$40
         bne GotAttr
         ldx #4*0      ;palette 0
         bit #$80
         beq GotAttr
         bit $78       ;test if $80 was already given
         bmi GotAttr
         ldx #4*2      ;palette 2
GotAttr: stx $7E       ;save attr.
        pla

        ;jsr CacheTest1
        ;bcs TechDisplaySkip

        jsr GetTech_TilePtr_4bpp

        .al
        .xl

        pha
         lda W_VRAMADDR ; Load the position in tech list (from function entry) 
         jsr DoTilenumber_8line

         lda #$0000
         jsr Make_VRAM_address_4bpp
        pla

        ldx $61   ;Load screen address (target)

        jsr Write_TileIndexes
        jsr DrawS_4bit

TechDisplaySkip:
        SET_16_BIT_A()
        
        ; $C2EF65 does this. Resets the attributes (leaves only bits $24).
        lda #$00DC
        trb $7E
        
        rtl
.)


BattleItemFunc:
        ; Code here
        ;In:
        ;    A = item number
        ;  $86 = item-line counter (ignore)
        ;  $80 = something that runs with step 5, goes to X
        ;  $82 = ($86+1)*128 ?
        ; $1580=table(index with X):
        ;          $1580 = item number
        ;          $1582 = disabled-flags (& $80)
        ;          $1583 = ?
        ;          $1584 = katakana thing
        ;Usable:
        ;  $84 = item number (temp)
        ;  $8E = item number*4 (temp)
        ;Todo:
        ;    write tile numbers to $7E94A0
        ;   VRAM - $7000 = tile table
        ;          $5000 = bitmap table
        ;Assume:
        ;    DB=7E
        ;Can use:
        ;    X, Y, A
        
        SET_16_BIT_AX()

        ;jsr CacheTest2
        ;bcs BattleStringEndCommon

        jsr GetItem_TilePtr_2bpp

        ;bra BattleStringCommon ;passthru
BattleStringCommon:
        pha
         lda $80
         and #$00FF

         ; Now we have item list scrolling position.
         sta @$004204   ;dividend
         lda #3
         sta @$004206   ;divisor

         ;wait 16 cycles before reading 4216
         DELAY_16CYCLES()

         lda @$004216   ;remainder
         asl
         tax
         lda @TileNumberListInBattle,x
         sta W_TILENUM

         lda #$5000
         jsr Make_VRAM_address_2bpp
        pla

        jsr BattleWrite_TileIndexes
        jsr DrawS_2bit
        
BattleStringEndCommon:
        SET_8_BIT_A()
        
        ; Must leave with A=8bit, X=16bit
        rtl

BattleTechFunc:
        .al
        .xl
        
        ;jsr CacheTest1
        ;bcs BattleStringEndCommon

        ; Code here
        ;In:
        ;    A = tech number
        ;  $86 = 0200, 0100. Doesn't seem useful.
        ;  $80 = something that runs with step 5, goes to X
        ;Usable:
        ;  $8E = tech number (temp)
        ;  $90 = tech number*4 (temp)
        ;Todo:
        ;    write tile numbers to $7E94A0
        ;   VRAM - $7000 = tile table
        ;          $5000 = bitmap table
        ;Assume:
        ;    DB=7E
        ;Can use:
        ;    X, Y, A
        SET_16_BIT_AX()

        jsr GetTech_TilePtr_2bpp
	bra BattleStringCommon


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DoTilenumber_8line:
         .al
         and #$0007 ; modulo 08
         phx
          asl
          tax
          lda @TileNumberList,x
         plx
         jsr ShopItemSelectCheck
         sta W_TILENUM
         rts


TileNumberList:
        ; All scrolling lists have max of 10 lines.
        ; All of them display maximally 11 tiles wide names.
        ; Here are tilenum starting indices.
        
        ; Tile map:
        ; 00-0B = elemental symbol graphics
        ; 0C-1F = --USABLE--
        ; 20-29 = item symbols
        ; 2A-2D = --USABLE-- "HMP:"
        ; 2E-2F = shield symbol, star-symbol
        ; 30-5A = --USABLE--
        ; 5B-5C = --USABLE-- left,right symbols (?)
        ; 5D-5F = --USABLE-- "():"
        ; 60-63 = --USABLE-- hand symbol (weird but yes)
        ; 64-66 = --USABLE-- "HMP"
        ; 67-6F = --USABLE-- hpmeter(battle)
        ; 70-72 = --USABLE-- hiragana/katakana symbols
        ; 73-7C = number font
        ; 7D-7E = --USABLE-- "DZ"
        ; 7F    = --USABLE-- arrow up
        ; 80-9F = --USABLE--
        ; A0-FF = user font

        ; This table is 16-bit because it makes
        ; other code faster.

        .word $15 ; -1F
        .word $30 ; -3A
        .word $3B ; -45
        .word $46 ; -50
        .word $51 ; -5B
        
        .word $5C ; -66
        .word $67 ; -71
        .word $7D ; -87
        .word $88 ; -92
        .word $93 ; -9D

        ; Left free: $15 - $1F
        ;            $92 - $9F
        
        ; For 10 tile font:
        ;   0C - 15
        ;   15 - 1E
        ;   30 - 39
        ;   3A - 43
        ;   44 - 4D
        
        ;   4E - 57
        ;   58 - 61
        ;   62 - 6B
        ;   7D - 86
        ;   97 - 90
        

TileNumberListInBattle:
        ; 3 lines here
        .word $0150, $0188, $0193


CalculateClockDifference:
        ; This calculates the difference between current clock
        ; and the saved clock.
        ; The result has the units of frames. 60 frames equals 1 second.
        ; The calculation is a little sloppy, because we never
        ; need the very exact value.
        ; The following shortcuts are taken:
        ; If there is difference in hours, we return 200.
        ; If there is difference in minutes, we return 200.
        ; If there is difference in seconds, we return 200.
        ; Otherwise we return number of frames.
        ; Since the caller only cares of numbers smaller than 15,
        ; these optimizations are ok.
        
        ; This function may use A, Y, W_VRAMADDR
        ; Returns the result in A.
        .al
        
        lda $0404 : cmp W_CLOCKW3 : bne +
        lda $0402 : cmp W_CLOCKW2 : bne +
        lda $0401 : cmp W_CLOCKW1+1 : bne +
        lda $0400 : sec : sbc W_CLOCKW1
        and #$00FF
        rts
+       lda #200
        rts
        
 
SaveClock:
        ; May use A, Y
        lda $0400 : sta W_CLOCKW1
        lda $0402 : sta W_CLOCKW2
        lda $0404 : sta W_CLOCKW3
        rts

ShopItemSelectCheck:
        ; Input variables: A (tile index)
        ; Returns the result in A
        .al
        pha

         ; Check if called from selected item routine
         lda $0C,s
         cmp #$DFA6
         bne +

         ; If so, load different tile index
        pla
        lda #$0001
        rts

+       pla
        rts

CacheTest1:
	clc
	rts

CacheTest2:
	clc
	rts
