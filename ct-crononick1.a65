#ifndef OMIT_IsVowel
IsVowel:
	sep #$21
	.as : sbc #$A0
	cmp #$0
	beq L33
	cmp #$28
	beq L33
	bcs L31
	cmp #$14
	beq L33
	bcs L29
	cmp #$8
	beq L33
	bcs L28
	cmp #$4
	bne L34
	bra L33
L28:
	cmp #$E
	bne L34
	bra L33
L29:
	cmp #$1A
	beq L33
	bcs L30
	cmp #$18
	bne L34
	bra L33
L30:
	cmp #$1E
	beq L33
	cmp #$22
	bne L34
	bra L33
L31:
	cmp #$34
	bcc L32
	cmp #$3B
	bcc L33
	sbc #$40
	cmp #$4
	bcc L33
	sbc #$10
	bcs L34
	bra L33
L32:
	cmp #$2E
	beq L33
	cmp #$32
	bne L34
L33:
	sec
	rts
L34:
	clc
	rts
#endif
#ifndef OMIT_IsConso
IsConso:
	sep #$21
	.as : sbc #$A1
	cmp #$3
	bcc L38
	cmp #$1A
	bcc L36
	cmp #$1D
	bcc L38
	cmp #$28
	bcc L35
	cmp #$2D
	bcc L38
	sbc #$2E
	cmp #$3
	bcc L38
	cmp #$4
	bne L39
	bra L38
L35:
	sec
	sbc #$1E
	cmp #$3
	bcc L38
	sbc #$4
	cmp #$5
	bcs L39
	bra L38
L36:
	cmp #$E
	bcc L37
	cmp #$13
	bcc L38
	sbc #$14
	cmp #$3
	bcc L38
	cmp #$4
	bne L39
	bra L38
L37:
	sec
	sbc #$4
	cmp #$3
	bcc L38
	sbc #$4
	cmp #$5
	bcs L39
L38:
	sec
	rts
L39:
	clc
	rts
#endif
#ifndef OMIT_OutWord
OutWord:
	sep #$20
	pha
	pha
	sta $1,s
	rep #$10
	.xl : ldx #0
L40:
	jsr LoopHelper
	beq L42
	sta $2,s
	lda $1,s
	bne L41
	ply
	rts
L41:
	.as : lda #0
	xba
	lda $2,s
	phx
	jsr OutcHelper
	plx
	sep #$20
	lda $1,s
	dec
	sta $1,s
	inx
	bra L40
L42:
	ply
	rts
#endif
#ifndef OMIT_OutWordBut
OutWordBut:
	sep #$20
	pha
	pha
	pha
	sta $2,s
	jsr Length
	sep #$20
	sta $1,s
	rep #$10
	.xl : ldx #0
L43:
	jsr LoopHelper
	beq L45
	sta $3,s
	lda $1,s
	cmp $2,s
	bne L44
	ply
	sep #$10
	ply
	rts
L44:
	lda $1,s
	dec
	sta $1,s
	.as : lda #0
	xba
	lda $3,s
	rep #$10
	phx
	jsr OutcHelper
	plx
	inx
	bra L43
L45:
	ply
	sep #$10
	ply
	rts
#endif
#ifndef OMIT_Length
Length:
	sep #$20
	pha
	.as : lda #$0
	sta $1,s
	rep #$10
	.xl : ldx #0
L46:
	jsr LoopHelper
	beq L47
	lda $1,s
	inc
	sta $1,s
	inx
	bra L46
L47:
	lda $1,s
	sep #$10
	ply
	rts
#endif
#ifndef OMIT_LastCharN
LastCharN:
	rep #$20
	.al : and #$FF
	rep #$10
	ora #$8000
	tax
	jsr LoopHelper
	rts
#endif
#ifndef OMIT_Do_Crononick
Do_Crononick:
	sep #$20
	pha
	pha
	pha
	pha
	pha
	pha
	jsr Length
	sta $6,s
	.as : cmp #$5
	bne L50
	rep #$20
	.al : lda #$0
	rep #$10
	tax
	jsr LoopHelper
	sta $1,s
	.as : lda #$1
	tax
	jsr LoopHelper
	sta $2,s
	lda #$2
	tax
	jsr LoopHelper
	sta $3,s
	lda #$3
	tax
	jsr LoopHelper
	sta $4,s
	lda #$4
	tax
	jsr LoopHelper
	sta $5,s
	lda $1,s
	jsr IsConso
	bcc L48
	lda $2,s
	jsr IsConso
	bcc L48
	lda $2,s
	jsr UpCase
	sep #$20
	sta $2,s
	rep #$20
	.al : and #$FF
	jsr OutcHelper
	lda $3,s
	and #$FF
	jsr OutcHelper
	lda $4,s
	and #$FF
	jsr OutcHelper
	lda $5,s
	and #$FF
	ply
	ply
	ply
	brl OutcHelper
L48:
	sep #$20
	lda $5,s
	jsr IsVowel
	bcc L50
	lda $3,s
	cmp $4,s
	bne L50
	lda $4,s
	jsr IsConso
	bcc L50
	lda $2,s
	jsr IsVowel
	bcc L49
	.as : lda #$3
	jsr OutWord
	lda #0
	xba
	lda $5,s
	ply
	ply
	ply
	brl OutcHelper
L49:
	lda #$1
	jsr OutWord
	lda #0
	xba
	lda $3,s
	jsr OutcHelper
	lda $4,s
	.al : and #$FF
	jsr OutcHelper
	lda $5,s
	and #$FF
	ply
	ply
	ply
	brl OutcHelper
L50:
	sep #$20
	lda $6,s
	rep #$10
	ply
	ply
	ply
	bra OutWord
#endif
