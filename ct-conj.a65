; Define functions for handling the bitness...
#define SET_8_BIT_A()   sep #$20 : .as
#define SET_16_BIT_A()  rep #$20 : .al
#define SET_8_BIT_X()   sep #$10 : .xs
#define SET_16_BIT_X()  rep #$10 : .xl

#define SET_8_BIT_AX()  sep #$30 : .xs : .as
#define SET_16_BIT_AX() rep #$30 : .xl : .al

; External symbols:
;   CHAR_OUTPUT_FUNC - The address of the vwf12 character drawing function
;

#define MEMBER_TABLE            $7E2980 ; Table of current member numbers
#define EPOCH_NAME_ADDRESS      $7E2C4D ; Where Epoch name is
#define CHAR_NAME_ADDRESS_TABLE $C25FD8 ; Table of character name addresses
; In English ROM, contents are:
;  2C23
;  2C29
;  2C2F
;  2C35
;  2C3B
;  2C41
;  2C47
; Epoch's name is:
;  2C4D

#define RTL_ADDR_C2             $5841   ; Where RTL can be found in page $C2

;**CUSTOMIZE**
; Omit creation of these:
#define OMIT_Do_LTA
#define OMIT_Do_SSA
#define OMIT_Do_NA
#define OMIT_Do_TTA
#define OMIT_EssiveStem

Conjugator:
.(
        .al

        #define Choice(name) cmp #CODE_##name: bne +: jsr name: bra DidConj

;**CUSTOMIZE**
 #ifndef OMIT_Do_N
      + Choice(Do_N)
 #endif
 #ifndef OMIT_Do_A
      + Choice(Do_A)
 #endif
 #ifndef OMIT_Do_LLA
      + Choice(Do_LLA)
 #endif
 #ifndef OMIT_Do_LTA
      + Choice(Do_LTA)
 #endif
 #ifndef OMIT_Do_SSA
      + Choice(Do_SSA)
 #endif
 #ifndef OMIT_Do_KSI
      + Choice(Do_KSI)
 #endif
 #ifndef OMIT_Do_LLE
      + Choice(Do_LLE)
 #endif
 #ifndef OMIT_Do_STA
      + Choice(Do_STA)
 #endif
 #ifndef OMIT_Do_TTA
      + Choice(Do_TTA)
 #endif
 #ifndef OMIT_Do_NA
      + Choice(Do_NA)
 #endif
 #ifndef OMIT_Do_HUN
      + Choice(Do_HUN)
 #endif

      + ; If it was none of the choices, call the original function.
        jsr Outc
        bra ConjEnd

DidConj:inc $31 ; skip next byte = prevent the game displaying the name.
ConjEnd:SET_8_BIT_A()
        rtl

;;;; OUTPUT A CHARACTER

Outc:   phk
        per (+)-1  ; push return-address
        ldy #RTL_ADDR_C2-1     ; address of an RTL in seg $C2
        phy
        jmp @CHAR_OUTPUT_FUNC  ; This function outputs chars.
+       rts

;;;;;;;;;;;;;;;;;;;;;;;;;

<CONJUGATER> ;Compiled ct.code will be inserted here by Makefile
; We insert it in the middle for two reasons:
;  - to gain warnings about unused labels from snescom
;  - the labels don't need to be exported.

OutcHelper:
         ; Outputs the character in A.
         ; Does not modify X.
         ; May modify Y.
         ; May modify A.
         ; Expected to return with A,X = 16-bit
         SET_16_BIT_AX()
         phx
          sta $35    ; Param to the fuction
          jsr Outc
          SET_16_BIT_AX()
         plx
         rts


LoopHelper:
    .(
        ; Fetches the X'th letter of the character's name in question.
        ; Does not modify X.
        ; Uses Y.
        ; Returns the letter in A.
        ; Expected to return with A=8-bit, X=16-bit, AH=0
        
        SET_16_BIT_AX()
        phx
         ldy #0
         tya       ; zero the upper 8 bits of A
         SET_8_BIT_A()
         
         lda #$7E
         sta $0239 ; Save segment now for later use
         
         ; Id of the name
         lda [$31]
         
         cmp #$20
         beq Epoch  ; Is it Epoch? ( = 20 )
         
         ; Not Epoch.
         cmp #$1B
         bcs Member ; If member? ( >= 1B )

         ; Not a member, just a character name.
         ; Character names are:
         ;  13=Crono
         ;  14=Marle
         ;  15=Lucca
         ;  16=Robo
         ;  17=Frog
         ;  18=Ayla
         ;  19=Magus
         
         ;  1A=[crononick] is not handled here.
         
         sec: sbc #$13

GetCharName:
         ;8bit here
         asl
         tax
         
         SET_16_BIT_A()
         ; Get the pointer to the name
         lda @CHAR_NAME_ADDRESS_TABLE,x

GotCharPointer:
         ;16bit here
         sta $0237 ; Save offset
        plx
        txy
        ; Get y'th char from the name
        lda [$37],y
        and #$00FF
        ;Letters in character name are always 8-bit.
        ;Character names are 0-terminated.
        SET_8_BIT_A()
        rts

Member:  ; Yes, member1(1B), member2(1C) or member3(1D)
         ; 8bit when entry here
         .as
         sec: sbc #$1B
         tax
         ; Get member number
         lda @MEMBER_TABLE,x
         bra GetCharName

Epoch:   ; Yes, Epoch.
         ; 8bit when entry here
         SET_16_BIT_A()
         ; Load Epoch address
         lda #!EPOCH_NAME_ADDRESS
         ; Continue with character name handling
         bra GotCharPointer
   .)

.)
