#
# This file is derived from taipus.cc, and attempts to describe
# the algorithm so that it's translatable in asm.
#
#
#  Syntax
#
#  :B name
#     declare function returning boolean, handles character name
#  :Q name
#     declare function returning boolean, parameter is byte (assigned to 'c')
#  :I name
#     declare function returning byte
## OUT name
#     Outputs character in name
## VAR name
#     local variable
## s name1 value/name2
#     assign name1 from value
## + name
#     name++
## - name
#     name--
## { 
#     loop over character name, character as 'c'
## }
#     end character name loop
## ? characters
#     If c is in set, process subblock
## > name value/name2
#     if(name > value), process subblock
## = name value/name2
#     if(name == value), process subblock
## TRUE
#     For boolean funcs, return TRUE
## FALSE
#     For boolean funcs, return FALSE
## RET
#     For boolean funcs, just return
## RETURN name
#     For byte funcs, return value of var
## ci name1 name2
#     Call integer-func name1, return value to name2.
## cb name1
#     Call bool-func name1
#     Process subblock if true retval
## cq name1 name2
#     Call bool-func name1 with param name2
#     Process subblock if true retval
## cv name1 name2
#     Call bool-func name1 with param name2
#     Ignore return value
## cf name
#     Call bool-func name
#     Ignore return value

:Q IsVowel
? aeiouy‰ˆÂÈAEIOUYƒ÷≈…0123456
  TRUE
FALSE

:Q IsKPT
? kKpPtT
  TRUE
FALSE

:B IsFront
VAR VowelType FoundE Finalguess
s VowelType 0
s FoundE 0
s Finalguess 0
{
s Finalguess 1
? aouAOU02368
  s VowelType 1
? ‰ˆyƒ÷Y14579
  s VowelType 2
? eiÈEI…
  s FoundE 1
? hkqÂHKQ≈
  s Finalguess 0
}
= VowelType 2
  TRUE
= VowelType 1
  FALSE
= FoundE 1
  TRUE
= Finalguess 1
  TRUE
FALSE

:I Length
VAR Len
s Len 0
{
+ Len
}
RETURN Len

:I LastChar3
VAR Hint1 Hint2 Hint3
s Hint1 0
s Hint2 0
s Hint3 0
{
  s Hint3 Hint2
  s Hint2 Hint1
  s Hint1 c
}
RETURN Hint3

:I LastChar2
VAR Hint1 Hint2
s Hint1 0
s Hint2 0
{
  s Hint2 Hint1
  s Hint1 c
}
RETURN Hint2

:I LastChar1
VAR Hint1
s Hint1 0
{
  s Hint1 c
}
RETURN Hint1

:B IsAbbrev
# C6:F000
VAR Len Vowels WasVowel ElseFlag
{
  + Len
  s ElseFlag 1
  ? aeiouy‰ˆÂÈAEIOUYƒ÷≈…
    s Vowels 1
    s WasVowel 1
    s ElseFlag 0
  ? 0123456789
# Number after a vowel means "no vowels"
    = WasVowel 1
      s Vowels 0
    s WasVowel 0
    s ElseFlag 0
  = ElseFlag 1
    s WasVowel 0
}
= Len 1
  TRUE
= Vowels 0
  TRUE
FALSE

:B IsEs
VAR Hint
ci LastChar2 Hint
cq IsVowel Hint
  ci LastChar1 c
  ? sS
    TRUE
FALSE

:B EndWithVowel
VAR Hint
ci LastChar1 Hint
cq IsVowel Hint
  TRUE
FALSE

:B DoubleHard
VAR Hint2 Hint3
cb EndWithVowel
  ci LastChar2 Hint2
  ci LastChar3 Hint3
  = Hint2 Hint3
    cq IsKPT Hint2
      TRUE
FALSE

:B AkiEnd
VAR Hint
ci LastChar3 c
? aA‰ƒ
  ci LastChar2 Hint
  cq IsKPT Hint
    ci LastChar1 c
    ? iI
      TRUE
FALSE

:Q OutWord
VAR Hint
s Hint c
{
  = Hint 0
    RET
  OUT c
  - Hint
}
RET

:Q OutByte
OUT c
RET

:B HardStem
VAR Len Hint Hint2
ci Length Len
cb IsAbbrev
  cv OutWord Len
  cv OutByte ':'
  ci LastChar1 Hint
  s Hint2 0
  ? flmnrswxFLMNRSWX479
    cv OutByte '‰'
    s Hint2 1
  ? zZ
    cv OutByte 'a'
    s Hint2 1
  ? 0123568
    RET
  = Hint2 0
    cv OutByte 't'
  RET
cb IsEs
  cv OutWord Len
  cv OutByte 't'
  RET
cb EndWithVowel
  cb AkiEnd
    - Len
    cv OutWord Len
    cv OutByte 'e'
    RET
  cv OutWord Len
  RET
cv OutWord Len
cv OutByte 'i'
RET

# C6:F2C2
:B SoftStem
VAR Len Hint
ci Length Len
# C6:F2CF
cb IsAbbrev
  cv OutWord Len
  cv OutByte ':'
  RET
cb IsEs
  - Len
  cv OutWord Len
  cv OutByte 'k'
  cv OutByte 's'
  cv OutByte 'e'
  RET
# C6:F34D
cb EndWithVowel
  cb DoubleHard
    - Len
    - Len
    cv OutWord Len
    ci LastChar1 Hint
    cv OutByte Hint
    RET
  cb AkiEnd
    - Len
    - Len
    cv OutWord Len
    cv OutByte 'e'
    RET
  cv OutWord Len
  RET
cv OutWord Len
cv OutByte 'i'
RET

:B Out_A
cb IsFront
  cv OutByte '‰'
  RET
cv OutByte 'a'
RET

:B Do_N
cf SoftStem
cv OutByte 'n'
RET

:B Do_A
cf HardStem
cf Out_A
RET

:B Do_LLA
cf SoftStem
cv OutByte 'l'
cv OutByte 'l'
cf Out_A
RET

:B Do_LLE
cf SoftStem
cv OutByte 'l'
cv OutByte 'l'
cv OutByte 'e'
RET

:B Do_STA
cf SoftStem
cv OutByte 's'
cv OutByte 't'
cf Out_A
RET

# -- End --
